SERVERSIDE:

app.post("/", upload.fields([{name:"firstsignalinput", maxCount: 1},{name:"secondsignalinput", maxCount: 1}]), (req, res) => {
    if (req.files["firstsignalinput"]) {
        let firstFile = req.files["firstsignalinput"][0];
        let fileExtension = path.extname(firstFile.originalname);
        let firstResultObj = [];
        let firstResultArr = [];
            if (fileExtension == ".csv") {//data is an array of objects
                fs.createReadStream(firstFile.path)
                    .pipe(csv())
                    .on("data", (data) => {
                        firstResultObj.push(data)})
                    .on("end", () => {
                    // Do something with the parsed CSV data
                    firstResultArr = firstResultObj.map((obj) => Object.values(obj).map(Number));//2 for loops
                    res.send(firstResultArr);
                    });
                }
            } 
            else if (req.files["secondsignalinput"]) {
                let secondFile = req.files["secondsignalinput"][0];
                let fileExtension = path.extname(secondFile.originalname);
                let secondResultObj = [];
                let secondResultArr = [];
                if (fileExtension == ".csv") {
                    fs.createReadStream(secondFile.path)
                        .pipe(csv())
                        .on("data", (data) => secondResultObj.push(data))
                        .on("end", () => {
                    // Do something with the parsed CSV data
                    secondResultArr = secondResultObj.map((obj) => Object.values(obj).map(Number));
                    res.send(secondResultArr);
                    });
                }
            }
        });
------------------------------------------------------------------------------------------------------------
function plotMainSignal(data, graphElement) {
    let i = 0;
    const interval = setInterval(() => {
      if (i < data.length) {
        const row = data[i];
        Plotly.extendTraces(graphElement, { x: [[row[0]]], y: [[row[1]]] }, [0]);
        i++;
      } else {
        clearInterval(interval);
      }
    }, 100);
}
------------------------------------------------------------------------------------------------------------
const firstUploadForm = document.getElementById("firstsignalform");
const secondUploadForm = document.getElementById("secondsignalform");
const firstSubmitBtn = document.getElementById("firstsubmitbtn");
const secondSubmitBtn = document.getElementById("secondsubmitbtn")
const addFirstSignalChannelBtn=document.getElementById("firstsignaladdchannelbtn");
const addSecondSignalChannelBtn = document.getElementById("secondsignaladdchannelbtn")
const addFirstSignalChannelForm = document.getElementById("firstsignaladdchannelform");
const addSecondSignalChannelForm = document.getElementById("secondsignaladdchannelform");
--------------------------------------------------------------------------------------------------
    //Play/Pause operation
    // if (stopFlag == true) {
    //   // var stoppingRow = i;
    //   // // var currentChannelCounter = channelCounter;
    //   // // var currentGraphElement = graphElement;
    //   // for (stoppingRow; stoppingRow < data.length; stoppingRow++) {
    //   //   unPlottedData.push(unPlottedData[stoppingRow]);
    //   // }
    //   // const lastTrace = graphElement.data[stoppingRow];
    //   // // const lastX = lastTrace.x[lastTrace.x.length - 1];
    //   // // const lastY = lastTrace.y[lastTrace.y.length - 1];
    //   // // plotSignal(unPlottedData, currentGraphElement, currentChannelCounter, lastX, lastY);
    // }
--------------------------------------------------------------------------------------------------
// };
  //let startPointFoundFlag = false;
  // const interval = setInterval(() => {
    //if (stopFlag == false){
      // if (i < data.length) {
      //   const row = data[i];
      //   // let beforeRow;
      //   // i - 100 < data.length && i - 100 >= 0 ? (beforeRow = data[i - 100]) : (beforeRow = data[i]);
      //   // let oldData = beforeRow[0];
      //   // let CurrentData = row[0];
      //   // let realtimeScrolling = {
      //   //   xaxis: {
      //   //     range: [oldData, CurrentData],
      //   //   },
      //   // };
      //   if (channelCounter != 0){// && !startPointFoundFlag) {
      //     // if (row[0] >= lastX && row[1] >= lastY) {
      //     //   startPointFoundFlag = true;
      //     //setTimeout(speed);
      //       Plotly.extendTraces(graphElement, { x: [[row[0]]], y: [[row[1]]] }, [channelCounter]);
      //     // }
      //   } else {
      //     //setTimeout(speed);
      //     Plotly.extendTraces(graphElement, { x: [[row[0]]], y: [[row[1]]] }, [channelCounter]);
      //     // Plotly.relayout(graphElement, realtimeScrolling);
      //   }
      //   i++;
      // } else {
      //   clearInterval(interval);
      // }
    //}
  // }, intervalTime);
  -----------------------------------------------------------------------------------------------
  // app.post("/download",async(req,res)=>{
//     // const doc = new PDFDocument();
//     // doc.pipe(fs.createWriteStream("output.pdf"));
//     let doc = new PDFDocument({ margin: 30, size: 'A4' });
//     // save document
//     doc.pipe(fs.createWriteStream("./output.pdf"));
//     //doc.fontSize(20).text(JSON.stringify(req.body));
//     console.log(req.body);
//     const table = {
//         title: "Signal Viewer",
//         headers: [ "min", "max", "var" , "std", "avg" ],
//         rows:[req.body.min ,req.body.max, req.body.var, req.body.std, red.body.avg],
//       };
//       await doc.table(table, { /* options */ });
    
//     doc.end();
//     res.download("output.pdf");
// });
----------------------------------------------------------------------------------------------------------
//firstCineSpeed.addEventListener("change", () => {});

// linkSignalsButton.addEventListener("click", createPDF); //CHANGE BUTTON AND VARIABLE NAMES
// function createPDF(){
// fetch("/download", {
//   method: "POST",
//   headers:{'Content-Type':'application/json'},
//   body: JSON.stringify({data:'helloooo'}),
//   credentials: "same-origin",
// })
//   .then((response) => {
//     return response.blob();
//   })
//   .then((blob) => {
//     const url = window.URL.createObjectURL(blob);
//     const a = document.createElement("a");
//     a.href = url;
//     a.download = "output.pdf";
//     a.click();
//   });
// }

// firstSignalGraph.on("plotly_relayout", function (eventData) {
//   if (eventData["legend.title"]) {
//     firstDropdown.
//   }
// });

// secondSignalGraph.on("plotly_relayout", function (eventData) {
//   if (eventData["legend.title"]) {
//     secondDropdown.
//   }
// });

// createpdf.addEventListener("click", createPDF); //CHANGE BUTTON AND VARIABLE NAMES
// async function createPDF() {
//   await fetch("/download", {
//     method: "POST",
//     headers: { "Content-Type": "application/json" },
//     body: JSON.stringify(signal_statistics()),
//     //body: JSON.stringify({data:'helloooo'}),
//     credentials: "same-origin",
//   })
//     .then((response) => {
//       return response.blob();
//     })
//     .then((blob) => {
//       const url = window.URL.createObjectURL(blob);
//       const a = document.createElement("a");
//       a.href = url;
//       a.download = "output.pdf";
//       a.click();
//     });
// }

// function signal_statistics() {
//   //fetch("/")
//   // Compute the average of a column
//   const column = firstsignalfirstchannel.map((row) =>
//     parseFloat(row["Column Name"])
//   );
//   const average = column.reduce((sum, value) => sum + value) / column.length;

//   // Compute the standard deviation of a column
//   const variance =
//     column.reduce((sum, value) => sum + Math.pow(value - average, 2), 0) /
//     (column.length - 1);
//   const standardDeviation = Math.sqrt(variance);

//   // Compute the minimum and maximum values in a column
//   const minValue = Math.min(...column);
//   const maxValue = Math.max(...column);
//   return {
//     var: variance,
//     std: standardDeviation,
//     avg: average,
//     min: minValue,
//     max: maxValue,
//   };
// }

//createpdf.add


-------------------------------------------------------------------------
FOR FIRST SIGNAL ONLY
// const firstInputElement = document.getElementById("firstsignalinput");
// const secondInputElement = document.getElementById("secondsignalinput");

// function handleSignalFetch(formObject, dataElement, graphElement,graphno) {
//   fetch("/", {
//     maxContentLength: 10000000,
//     maxBodyLength: 10000000,
//     method: "POST",
//     credentials: "same-origin",
//     body: formObject,
//   })
//     .then((response) => {
//       return response.text(); //arrive as string
//     })
//     .then((responseMsg) => {
//       dataElement = JSON.parse(responseMsg); //converts it to js object
//       firstsignalfirstchannel = dataElement;
//       plotSignal(dataElement, graphElement, graphno);
//     })
//     .catch((error) => console.error(error));
// };

// firstInputElement.addEventListener("change", (submission) => {
//   submission.preventDefault();
//   const file = firstInputElement.files[0];
//   if (!file) {
//     alert("No file selected");
//   } else {
//     const formDataObject = new FormData();
//     formDataObject.append("firstsignalinput", file);
//     handleSignalFetch(formDataObject, firstSignalData, firstSignalGraph,1);
//   }
// });

// secondInputElement.addEventListener("change", (submission) => {
//   submission.preventDefault();
//   const file = secondInputElement.files[0];
//   if (!file) {
//     alert("No file selected");
//   } else {
//     const formDataObject = new FormData();
//     formDataObject.append("secondsignalinput", file);
//     handleSignalFetch(formDataObject, secondSignalData, secondSignalGraph,2);
//   }
// });

IN CREATEPLOT FUNC:
  // let trace = {
  //   x: [],
  //   y: [],
  //   type: "scatter",
  //   name: "Channel 1",
  //   showlegend: true,
  //   legend: {
  //     itemdoubleclick: false
  //   },
  // };
  -----------------------------------------------------------
  
npm install express
npm install cors
npm install body-parser
npm install node
npm install fs
npm install csv-parser
npm install path
npm install plotly
npm install binary-parser
npm install pdfkit
npm install pdfkit-table
npm install papaparse
npm install util

start server using node -serversidefilename-
TO RESTART SERVER AUTOMATICALLY:
npm install -g nodemon
nodemon server.js
------------------------------------------------------------
// createpdf2.addEventListener("click", async () => { 
//   allSecondGraphTraces = [];
//   getAllGraphTraces(secondSignalGraph, 2); 
//   var imgOpts = {
//     format: "png",
//     width: 500,
//     height: 400,
//   };
//   const imgData = await Plotly.toImage(secondSignalGraph, imgOpts);
//   await createPDF(allSecondGraphTraces, imgData); }); 
-------------------------------------------------------
// const imgData1 = await Plotly.toImage(firstSignalGraph, imgOpts);
  // const imgData2 = await Plotly.toImage(secondSignalGraph, imgOpts);
  --------------------------------------------------------------------------------
  //   doc.image(req.body.img1, 30, 200, { width: 300 });
//   doc.image(req.body.img2, 30, 400, { width: 300 });
  // .text("Proportional to width", 0, 0);
  //  doc.Plotly.Snapshot.toImage(gd, {format: 'png', width: 1000, height: 800})
  ------------------------------------------------------------------------------
  //const signalsArr = [signals1, signals2]; //const concatenated = signals1.concat(signals2);
  -------------------------------------------------------------------------------