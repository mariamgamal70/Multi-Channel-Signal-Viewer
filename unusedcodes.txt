SERVERSIDE:

app.post("/", upload.fields([{name:"firstsignalinput", maxCount: 1},{name:"secondsignalinput", maxCount: 1}]), (req, res) => {
    if (req.files["firstsignalinput"]) {
        let firstFile = req.files["firstsignalinput"][0];
        let fileExtension = path.extname(firstFile.originalname);
        let firstResultObj = [];
        let firstResultArr = [];
            if (fileExtension == ".csv") {//data is an array of objects
                fs.createReadStream(firstFile.path)
                    .pipe(csv())
                    .on("data", (data) => {
                        firstResultObj.push(data)})
                    .on("end", () => {
                    // Do something with the parsed CSV data
                    firstResultArr = firstResultObj.map((obj) => Object.values(obj).map(Number));//2 for loops
                    res.send(firstResultArr);
                    });
                }
            } 
            else if (req.files["secondsignalinput"]) {
                let secondFile = req.files["secondsignalinput"][0];
                let fileExtension = path.extname(secondFile.originalname);
                let secondResultObj = [];
                let secondResultArr = [];
                if (fileExtension == ".csv") {
                    fs.createReadStream(secondFile.path)
                        .pipe(csv())
                        .on("data", (data) => secondResultObj.push(data))
                        .on("end", () => {
                    // Do something with the parsed CSV data
                    secondResultArr = secondResultObj.map((obj) => Object.values(obj).map(Number));
                    res.send(secondResultArr);
                    });
                }
            }
        });
------------------------------------------------------------------------------------------------------------
function plotMainSignal(data, graphElement) {
    let i = 0;
    const interval = setInterval(() => {
      if (i < data.length) {
        const row = data[i];
        Plotly.extendTraces(graphElement, { x: [[row[0]]], y: [[row[1]]] }, [0]);
        i++;
      } else {
        clearInterval(interval);
      }
    }, 100);
}
------------------------------------------------------------------------------------------------------------
const firstUploadForm = document.getElementById("firstsignalform");
const secondUploadForm = document.getElementById("secondsignalform");
const firstSubmitBtn = document.getElementById("firstsubmitbtn");
const secondSubmitBtn = document.getElementById("secondsubmitbtn")
const addFirstSignalChannelBtn=document.getElementById("firstsignaladdchannelbtn");
const addSecondSignalChannelBtn = document.getElementById("secondsignaladdchannelbtn")
const addFirstSignalChannelForm = document.getElementById("firstsignaladdchannelform");
const addSecondSignalChannelForm = document.getElementById("secondsignaladdchannelform");
--------------------------------------------------------------------------------------------------
    //Play/Pause operation
    // if (stopFlag == true) {
    //   // var stoppingRow = i;
    //   // // var currentChannelCounter = channelCounter;
    //   // // var currentGraphElement = graphElement;
    //   // for (stoppingRow; stoppingRow < data.length; stoppingRow++) {
    //   //   unPlottedData.push(unPlottedData[stoppingRow]);
    //   // }
    //   // const lastTrace = graphElement.data[stoppingRow];
    //   // // const lastX = lastTrace.x[lastTrace.x.length - 1];
    //   // // const lastY = lastTrace.y[lastTrace.y.length - 1];
    //   // // plotSignal(unPlottedData, currentGraphElement, currentChannelCounter, lastX, lastY);
    // }
